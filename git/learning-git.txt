--------------------------------------------------------------------------------------------------
Controle de Versão - Git
--------------------------------------------------------------------------------------------------

-----------------------------------
O que é Controle de Versão?
-----------------------------------
Controle de versão é um sistema que registra as mudanças feitas em um arquivo ou um conjunto de
arquivos ao longo do tempo de forma que você possa recuperar versões específicas.


-----------------------------------
Sistemas de Controle de Versão Locais:
-----------------------------------
*Schema:
-------------------------------
|-file-------[version 3]      |
|	     [version 2]      |
|	     [version 1]      |
-------------------------------
*Exemplo:
-rcs

-----------------------------------
Sistemas de Controle de Versão Centralizados:
-----------------------------------
*Schema:
---------------------------------
|-file-------     [version 3] 	|
|	     |----[version 2]  	|
|-file-------     [version 1]	|
---------------------------------
*Exemplo:
-CVS
-Subversion
-Perforce

-----------------------------------
Sistemas de Controle de Versão Distribuídos:
-----------------------------------
*Schema:
----------------------------------------
|[version 1] [version 2] [version 3]   |
|          /	         \	       |
|   	  /	          \	       |
|        /        	   \	       |
|       /                   \	       |
|[version 3]	       [version 3]     |
|[version 2]  <----->  [version 2]     |
|[version 1]	       [version 1]     |
----------------------------------------
*Exemplo:
-Git
-Mercurial
-Bazzar
-Darcs

-----------------------------------
História do Git
-----------------------------------
Durante a maior parte do período de manutenção do Kernel Linux(1991-2002),as mudanças no software eram
repassadas como patches e arquivos compactados.

Em 2002, o projeto do Kernel do Linux começou a usar um sistema DVCS proprietário chamado BitKeeper.
Em 2005, o relacionamento entre a comunidade e a empresa que desenvolvia o BitKeeper se desfez do
status de isento-de-pagamento da ferramenta foi revogado.

Isso levou a comunidade de desenvolvedores do Linux (em particular Linus Torvalds, o criador do Linux)
a desenvolver sua própria ferramenta baseada nas lições que eles aprenderam ao usar o BitKeeper. 

Alguns dos objetivos do novo sistema eram:
*Velocidade
*Design simples
*Suporte robusto a desenvolvimento não linear (milhares de branches paralelos)
*Totalmente distribuído
*Capaz de lidar eficientemente com grandes projetos como o kernel do Linux (velocidade e volume de dados)

-----------------------------------
O Sistema de Controle de Versão Git
-----------------------------------
A maior diferença entre Git e qualquer outro VCS (Subversion e similares inclusos) está na forma que o Git
trata os dados. Conceitualmente, a maior parte dos outros sistemas armazena informação como uma lista de
mudanças por arquivo. Esses sistemas (CVS, Subversion, Perforce, Bazaar, etc.) tratam a informação que
mantém como um conjunto de arquivos e as mudanças feitas a cada arquivo ao longo do tempo.

==================================================
|Como os outros sistemas costumam armazenar dados|
|------------------------------------------------|
|version1 version2 version3 version4 version5	 |
|fileA----->.1--------------->.2                 |
|fileB----------------------->.1------>.2        |
|fileC----->.1------>.2--------------->.3        |
==================================================

==================================================
|Como o Git armazena dados			 |
|------------------------------------------------|
|version1  version2  version3  version4  version5|
|    A 	      A1       -A1-       A2       -A2-  |
|    B        -B-      -B-        B1        B2   |
|    C        C1        C2       -C2-       C3   |
==================================================

Git não pensa ou armazena sua informação dessa forma. Ao invés disso, o Git considera que os dados
são como um conjunto de 
snapshots (captura de algo em um determinado instante, como em uma foto) de um mini-sistema de arquivos.

Cada vez que você salva ou consolida (commit) o estado do seu projeto no Git, é como se ele tirasse uma
foto de todos os seus arquivos naquele momento e armazenasse uma referência para essa captura. Para ser
eficiente, se nenhum arquivo foi alterado, a informação não é armazenada novamente - apenas um link para
o arquivo idêntico anterior que já foi armazenado.

-----------------------------------
Quase Todas Operações São Locais
-----------------------------------
A maior parte das operações no Git precisam apenas de recursos e arquivos locais para
operar - geralmente nenhuma outra informação é necessára de outro computador na sua rede.

Diferente os outros CVCS, onde a maior parte das operações possui latência por conta de
comunicação com a rede, o Git ganha performance nesse aspecto, uma vez que você tem todo
o histórico do projeto no seu disco local.

O Git não precisa estar conectado a rede para que lhe permita navegar no histórico do projeto,
pois ele simplesmente lê diretamente do seu banco de dados local.

Há poucas coisas que você não possa fazer offiline com o Git, pois você pode fazer commits até que
tenha acesso a rede  novamente para fazer o upload.

-----------------------------------
Git Tem Integridade
-----------------------------------
Tudo no Git tem seu checksum (valor para verificação de integridade) calculado antes que seja armazenado
e então passa a ser referenciado pelo checksum.Isso significa que é impossível mudar o conteúdo de qualquer 
arquivo ou diretório sem que o Git tenha conhecimento. Essa funcionalidade é parte fundamental do Git e
é integral à sua filosofia. Você não pode perder informação em trânsito ou ter arquivos corrompidos sem
que o Git seja capaz de detectar.

O mecanismo que o Git usa para fazer o checksum é chamado de hash SHA-1, uma string de 40 caracteres composta de
caracteres hexadecimais (0-9 e a-f) que é calculado a partir do conteúdo de um arquivo ou estrutura de um diretório
no Git. Um hash SHA-1 parece com algo mais ou menos assim:

==============================================
===24b9da6552252987aa493b52f8696cd6d3b00373===
==============================================

Você vai encontrar esses hashes em todo canto, uma vez que Git os utiliza tanto. Na verdade, tudo que
o Git armazena é identificado não por nome do arquivo mas pelo valor do hash do seu conteúdo.

-----------------------------------
Git Geralmente Só Adiciona Dados
-----------------------------------
Quase todas as instruções que são comandadas no Git apenas acrescentam dados à base.É difícil fazer algo
que não seja reversível ou remover de qualquer forma.

Assim você pode perder ou bagunçar mudanças que ainda nào commitou; mas depois de fazer um commit de um snapshot no
Git, é muito difícil que você perca, especialmente se você frequentemente joga suas mudanças para outro repositório.

-----------------------------------
Os Três Estados
-----------------------------------
.Consolidade [commited] = quando os dados estão seguramente armazenados em sua base de dados local
.Modificado  [modified] = trata um arquivo que sofreu mudanças mas que ainda não foi consolidado na base de dados
.Preparado   [etaged]   = quando você marca um arquivo modificado em sua versão corrente para que ele faça parte
		          do snapshot do próximo commit(consolidação)

============================================================================================================
|-------------------------------------------Local Operations-----------------------------------------------|
============================================================================================================
|[Diretório de Trabalho]    		 [Área de Preparação]		        [Diretório do Git]	   |
|   working directory                       staging area                     git directory(repository)	   |
|       |					|     					|		   |
|       |<-------------------------------checkout the project---------------------------|		   |
|	|					|					|		   |
|       |					|					|		   |
|	|					|					|		   |
|       |--------------stage files------------->|				        |		   |
|       |					|					|		   |
|       |				        |					|		   |
|       |					|--------------commit------------------>|		   |	
|	|					|					|		   |
============================================================================================================

*O diretório do Git é o local onde o Git armazena os metadados e o banco de objetos de seu projeto. 
Esta é a parte mais importante do Git, e é a parte copiada quando você clona um repositório de outro computador.

*O diretório de trabalho é um único checkout de uma versão do projeto. Estes arquivos são obtidos a partir da
base de dados comprimida no diretório do Git e colocados em disco para que você possa utilizar ou modificar.

*A área de preparação é um simples arquivo, geralmente contido no seu diretório Git, que armazena
informações sobre o que irá em seu próximo commit.

=========================================================================================
|O workflow básico do Git pode ser descrito assim:                                      |
|                                                                                       |
|1.Você modifica arquivos no seu diretório de trabalho.                                 |
|2.Você seleciona os arquivos, adicionando snapshots deles para sua área de preparação. |
|3.Você faz um commit, que leva os arquivos como eles estão na sua área de preparação e |
|  os armazena permanentemente no seu diretório Git.                                    |
=========================================================================================

*e uma versão particular de um arquivo está no diretório Git, é considerada consolidada. Caso seja modificada mas foi adicionada
 à área de preparação, está preparada. E se foi alterada desde que foi obtida mas não foi preparada, está modificada. No Capítulo 2,
 você aprenderá mais sobre estes estados e como se aproveitar deles ou pular toda a parte de preparação.


-----------------------------------
Instalando o Git
-----------------------------------

*Instalando a Partir do Fonte
------------------------------
Para instalar o Git, você precisa ter as seguintes bibliotecas que o Git depende: curl, zlib, openssl, expat e libiconv

-Linux:
yum     -->  $ yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel
apt-get -->  apt-get install libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev

$ tar -zxf git-1.7.2.2.tar.gz
$ cd git-1.7.2.2
$ make prefix=/usr/local all
$ sudo make prefix=/usr/local install

-Windows
http://git-scm.com/download

-Após a conclusão, você também pode obter o Git via o próprio Git para atualizações:
$ git clone git://git.kernel.org/pub/scm/git/git.git

*Instalando no Linux
------------------------------
$ yum install git-core
$ apt-get install git

*Instalando no Mac
------------------------------
http://sourceforge.net/projects/git-osx-installer/
MacPorts -->  $ sudo port install git-core +svn +doc +bash_completion +gitweb

*Instalando no Windows
------------------------------
http://msysgit.github.com


-----------------------------------
Configuração Inicial do Git
-----------------------------------

  Git vem com uma ferramenta chamada git config que permite a você ler e definir variáveis de configuração que controlam todos
os aspectos de como o Git parece e opera. Essas variáveis podem ser armazenadas em três lugares diferentes:

-Arquivo /etc/gitconfig: Contém valores para todos usuários do sistema e todos os seus repositórios. Se você passar a opção --system para git config,
 ele lerá e escreverá a partir deste arquivo especificamente.

-Arquivo ~/.gitconfig: É específico para seu usuário. Você pode fazer o Git ler e escrever a partir deste arquivo especificamente passando a opção --global.

-Arquivo de configuração no diretório git (ou seja, .git/config) de qualquer repositório que você está utilizando no momento: Específico para aquele único repositório.
 Cada nível sobrepõem o valor do nível anterior, sendo assim valores em .git/config sobrepõem aqueles em /etc/gitconfig.

Em sistemas Windows, Git procura pelo arquivo .gitconfig no diretório $HOME (C:\Documents and Settins\$USER para a maioria das pessoas).
Também procura por /etc/gitconfig, apesar de que é relativo à raiz de MSys, que é o local onde você escolheu instalar o Git
no seu sistema Windows quando executou o instalador.

-----------------------------------
Sua Identidade
-----------------------------------
$ git config --global user.name "Nome Sobrenome"
$ git config --global user.email username@example.com

-----------------------------------
Seu Editor
-----------------------------------
$ git config --global core.editor emacs

-----------------------------------
Sua Ferramenta de Diff
-----------------------------------
Diff = utilitário de comparação de arquivos que gera as diferenças entre dois arquivos.
$ git config --global merge.tool vimdiff

*Git aceita kdiff3, tkdiff, meld, xxdiff, emerge, vimdiff, gvimdiff, ecmerge e opendiff como ferramentas
 válidas para merge. Você também pode configurar uma ferramenta personalizada; 

-----------------------------------
Verificando Suas Configurações
-----------------------------------
git config --list 

-----------------------------------
Obtendo Ajuda
-----------------------------------
$ git help <verb>
$ git <verb> --help
$ man git-<verb>
$ git help <command> = manpage de um comando 

-----------------------------------
Obtendo um Repositório Git
-----------------------------------

-Inicializando um Repositório em um Diretório Existente
$ git init <--- Depois de navegar até o diretório do projeto

  Será criado um novo subdiretório chamado .git que contém os arquivos necessários de seu repositório(um esqueleto dele), 
sendo que o projeto ainda não está sendo monitorado.
  Para começar a controlar o versionamento dos arquivos existentes, voce deve começar a monitor o projeto e fazer um commit inicial:
$ git add *.c
$ git add README
$ git commit -m 'initial project version'

-----------------------------------
Clonando um Repositório Existente
-----------------------------------
Caso você queira copiar um repositório Git já existente — por exemplo, um projeto que você queira
contribuir — o comando necessário é git clone.
